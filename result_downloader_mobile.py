# JAC 12th Results PDF Generator – Final Fixed Version

import requests
import datetime
import time
import re
import sys
import shutil
import itertools
import io

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.platypus import (
    BaseDocTemplate, PageTemplate, Frame, Spacer,
    Flowable, NextPageTemplate, PageBreak
)
from reportlab.platypus import Table, TableStyle, Paragraph
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from reportlab.lib.styles import getSampleStyleSheet

spinner = itertools.cycle(["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"])

def fetch_result(roll_code, roll_no):
    url = "https://results.digilocker.gov.in/JAC_Results/MetaData_HSCER"
    data = {
        "rroll": str(roll_no),
        "doctype": "HSCER",
        "rollcode": str(roll_code),
        "year": "2025"
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    try:
        response = requests.post(url, data=data, headers=headers)
        if response.status_code == 200:
            result_json = response.json()
            if result_json.get("status") == 200 and "data" in result_json:
                return result_json["data"]
    except Exception as e:
        print(f"Error fetching roll no {roll_no}: {e}")
    return None


def print_progress(current, total=None, roll_no=None, name=""):
    name_display = name[:30] if name else "Fetching..."
    if total:
        term_width = shutil.get_terminal_size((80, 20)).columns
        bar_length = min(40, max(term_width - 50, 10))
        progress = current / total
        block = int(bar_length * progress)
        bar = '█' * block + '░' * (bar_length - block)
        percent = f"{progress * 100:.2f}%"
        sys.stdout.write(
            f"\r[{bar}] {percent} | Roll: {roll_no} | {name_display:<30}"
        )
    else:
        spin = next(spinner)
        sys.stdout.write(
            f"\r{spin} Scanning Roll: {roll_no} | {name_display:<30} | Found: {current}"
        )
    sys.stdout.flush()


def draw_cover_page(canvas, doc, college_name, stream, start_roll, end_roll):
    canvas.saveState()
    width, height = A4
    center_x = width / 2
    center_y = height - 180
    circle_radius = 50
    canvas.setFillColor(colors.white)
    canvas.setStrokeColor(colors.black)
    canvas.setLineWidth(1)
    canvas.circle(center_x, center_y, circle_radius, stroke=1, fill=1)
    try:
        logo_url = "https://results.digilocker.gov.in/assets-new/JAC_logo.png"
        response = requests.get(logo_url)
        logo_image = ImageReader(io.BytesIO(response.content))
        logo_size = circle_radius * 2 * 0.9
        canvas.drawImage(
            logo_image,
            center_x - logo_size / 2,
            center_y - logo_size / 2,
            width=logo_size,
            height=logo_size,
            mask='auto'
        )
    except Exception as e:
        canvas.setFont("Helvetica", 10)
        canvas.drawCentredString(center_x, center_y, f"[Logo Error: {e}]")
    text_y = center_y - circle_radius - 30
    canvas.setFillColor(colors.black)
    canvas.setFont("Helvetica-Bold", 22)
    canvas.drawCentredString(center_x, text_y, "JAC Intermediate")
    canvas.drawCentredString(center_x, text_y - 28, "Exam Results 2025")
    canvas.setFont("Helvetica", 14)
    canvas.drawCentredString(center_x, text_y - 60, "Comprehensive Marksheet Report")
    canvas.setFont("Helvetica-Bold", 16)
    canvas.drawCentredString(center_x, text_y - 105, college_name)
    canvas.setFont("Helvetica-Bold", 12)
    canvas.drawString(center_x - 90, text_y - 135, "Stream:")
    canvas.setFont("Helvetica", 12)
    canvas.drawString(center_x - 10, text_y - 135, stream)
    canvas.setFont("Helvetica-Bold", 12)
    canvas.drawString(center_x - 90, text_y - 155, "Roll Range:")
    canvas.drawString(center_x - 10, text_y - 155, f"{start_roll} to {end_roll}")
    canvas.setFont("Helvetica", 12)
    canvas.drawCentredString(center_x, 90, "Generated by Sahil Das")
    canvas.setFont("Helvetica", 10)
    canvas.drawCentredString(center_x, 70, f"Date: {datetime.datetime.now().strftime('%B %d, %Y')}")
    canvas.restoreState()

def draw_header_footer(canvas, doc):
    canvas.setFont("Helvetica", 10)
    canvas.drawCentredString(A4[0]/2, A4[1]-30, "JAC Intermediate Results 2025")
    canvas.drawCentredString(A4[0]/2, 20, f"Page {doc.page - 1}")
    # Add date stamp at bottom right
    import datetime
    date_str = datetime.datetime.now().strftime('%d-%b-%Y')
    canvas.setFont("Helvetica", 9)
    canvas.drawRightString(A4[0]-40, 20, f"Date: {date_str}")
    # Add developer name at bottom left
    canvas.setFont("Helvetica", 9)
    canvas.drawString(40, 20, "Generated by Sahil Das")

def draw_marksheet(canvas, student, doc):
    canvas.saveState()
    draw_header_footer(canvas, doc)
    x, y, width, height = 60, 130, 475, 620
    canvas.setLineWidth(1)
    canvas.rect(x, y, width, height)
    inner_x = x + 15
    inner_y = y + height - 40
    canvas.setFont("Helvetica-Bold", 14)
    canvas.drawCentredString(x + width/2, inner_y, "JAC Intermediate (2025) Marksheet")
    info = [
        ("Roll No:", student.get("ROLL_NO", "")),
        ("Roll Code:", student.get("RROLL", "")),
        ("Name:", student.get("CNAME", "")),
        ("Father's Name:", student.get("FNAME", "")),
        ("School:", student.get("SCH_NAME", "")),
        ("Stream:", student.get("STREAM", "")),
    ]
    canvas.setFont("Helvetica", 10)
    inner_y -= 30
    for label, value in info:
        canvas.setFont("Helvetica-Bold", 10)
        canvas.drawString(inner_x, inner_y, label)
        canvas.setFont("Helvetica", 10)
        canvas.drawString(inner_x + 100, inner_y, value)
        inner_y -= 15
    canvas.line(inner_x, inner_y, x + width - 15, inner_y)
    inner_y -= 20
    canvas.setFont("Helvetica-Bold", 11)
    canvas.drawString(inner_x, inner_y, "Subjects & Marks")
    inner_y -= 20
    table_data = [["Subject", "Theory", "Practical", "Total"]]
    for i in range(1, 6):
        table_data.append([
            student.get(f"SUB{i}NM", "-"),
            student.get(f"SUB{i}_TH_MRKS", "-"),
            student.get(f"SUB{i}_PR_MRKS", "-"),
            student.get(f"SUB{i}_TOT_MRKS", "-")
        ])
    table = Table(table_data, colWidths=[130, 90, 90, 90])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#f2f2f2")),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("ALIGN", (1, 1), (-1, -1), "CENTER"),
        ("FONTSIZE", (0, 0), (-1, -1), 10),
    ]))
    table.wrapOn(canvas, width, height)
    table_height = len(table_data) * 20
    table.drawOn(canvas, inner_x, inner_y - table_height)
    final_y = inner_y - table_height - 60
    total = int(student.get("TOT_MRKS") or 0)
    percent = round(total / 500 * 100, 1)
    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y, "Total Marks:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y, str(total))
    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y - 15, "Percentage:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y - 15, f"{percent}%")
    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y - 30, "Result:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y - 30, student.get("RESULT", ""))
    canvas.restoreState()

class SetStudentIndex(Flowable):
    def __init__(self, doc, idx):
        super().__init__()
        self.doc = doc
        self.idx = idx
    def draw(self):
        self.doc.current_student_index = self.idx

def generate_pdf_with_canvas(filename, students_data, college_name, stream, start_roll, end_roll):
    from reportlab.platypus import BaseDocTemplate, PageTemplate, Frame, PageBreak, NextPageTemplate, Spacer, Table, TableStyle, Paragraph
    from reportlab.lib.styles import getSampleStyleSheet
    styles = getSampleStyleSheet()

    class CanvasDocTemplate(BaseDocTemplate):
        def __init__(self, filename, students_data, **kwargs):
            super().__init__(filename, **kwargs)
            self.students_data = students_data
            self.current_student_index = -1
            frame = Frame(0, 0, A4[0], A4[1], id='normal')
            self.addPageTemplates([
                PageTemplate(id='Cover', frames=frame, onPage=self.draw_cover),
                PageTemplate(id='Marksheet', frames=frame, onPage=self.draw_marksheet_wrapper, onPageEnd=self.draw_header_footer)
            ])
        def draw_cover(self, canvas, doc):
            draw_cover_page(canvas, doc, college_name, stream, start_roll, end_roll)
        def draw_marksheet_wrapper(self, canvas, doc):
            if 0 <= self.current_student_index < len(self.students_data):
                student = self.students_data[self.current_student_index]
                draw_marksheet(canvas, student, doc)
        def draw_header_footer(self, canvas, doc):
            canvas.saveState()
            # Clear any previous header/footer by drawing a white rectangle
            canvas.setFillColor(colors.white)
            canvas.rect(0, 0, A4[0], 40, stroke=0, fill=1)  # Footer area
            canvas.rect(0, A4[1]-40, A4[0], 40, stroke=0, fill=1)  # Header area
            canvas.setFillColor(colors.black)
            canvas.setFont("Helvetica", 10)
            canvas.drawCentredString(A4[0]/2, A4[1]-30, "JAC Intermediate Results 2025")
            canvas.drawCentredString(A4[0]/2, 20, f"Page {doc.page}")
            # Add date stamp at bottom right
            import datetime
            date_str = datetime.datetime.now().strftime('%d-%b-%Y')
            canvas.setFont("Helvetica", 9)
            canvas.drawRightString(A4[0]-40, 20, f"Date: {date_str}")
            # Add developer name at bottom left
            canvas.setFont("Helvetica", 9)
            canvas.drawString(40, 20, "Generated by Sahil Das")
            canvas.restoreState()

    def get_top_10_table(students_data):
        # Sort by total marks descending
        sorted_students = sorted(students_data, key=lambda s: int(s.get('TOT_MRKS', 0)), reverse=True)
        top_10 = sorted_students[:10]
        data = [["Rank", "Name", "Roll No", "Total Marks", "Percentage"]]
        for idx, student in enumerate(top_10, 1):
            total = int(student.get("TOT_MRKS") or 0)
            percent = round(total / 500 * 100, 1)
            data.append([
                str(idx),
                student.get("CNAME", ""),
                student.get("ROLL_NO", ""),
                str(total),
                f"{percent}%"
            ])
        table = Table(data, colWidths=[35, 150, 80, 80, 80])
        table.setStyle(TableStyle([
            ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#e0e0e0")),
            ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
            ("FONTSIZE", (0, 0), (-1, -1), 11),
        ]))
        return table

    doc = CanvasDocTemplate(filename, students_data=students_data, pagesize=A4)
    flowables = [NextPageTemplate('Marksheet'), PageBreak()]

    # Top 10 Scorer Page
    flowables.append(Spacer(1, 40))  # Add space to avoid header overlap
    heading = f"<b>Top 10 Scorers</b> <br/><font size=10>({stream} - {college_name})</font>"
    flowables.append(Paragraph(heading, styles['Title']))
    flowables.append(Spacer(1, 18))
    flowables.append(get_top_10_table(students_data))
    flowables.append(PageBreak())

    for i in range(len(students_data)):
        flowables.append(SetStudentIndex(doc, i))
        if i != len(students_data) - 1:
            flowables.append(PageBreak())
        flowables.append(Spacer(0, 1))  # Triggers canvas rendering

    # Remove last PageBreak to avoid blank page at end
    while flowables and isinstance(flowables[-1], PageBreak):
        flowables.pop()

    doc.build(flowables)
    print(f"✅ PDF Generated: {filename}")


def main():
    roll_code = input("Enter Roll Code (e.g. 11061): ").strip()
    start_roll = int(input("Enter starting Roll Number: ").strip())
    choice = input("Do you want to enter the last roll number? (y/n): ").strip().lower()
    if choice == 'y':
        entered_last_roll = int(input("Enter last Roll Number: ").strip())
        last_roll = entered_last_roll + 1
        if entered_last_roll < start_roll:
            print("Last roll number must be greater than starting.")
            return
        download_all = False
        total_rolls = last_roll - start_roll + 1
    else:
        last_roll = None
        download_all = True

    students_data = []
    current_roll = start_roll
    consecutive_not_found = 0
    max_consecutive_404 = 10
    count = 0

    print("\nDownloading results...\n")

    while True:
        if not download_all and current_roll > last_roll:
            break
        student = fetch_result(roll_code, current_roll)
        if student:
            students_data.append(student)
            consecutive_not_found = 0
            if len(students_data) == 1:
                college_name = student.get("SCH_NAME", "Unknown College")
                stream = student.get("STREAM", "N/A")
                print(f"\n📘 {college_name} — Stream: {stream}\n")
        else:
            consecutive_not_found += 1
        count += 1
        name = student.get("CNAME", "") if student else ""
        if not download_all:
            print_progress(count, total_rolls, current_roll, name)
        else:
            print_progress(count, None, current_roll, name)
        if download_all and consecutive_not_found >= max_consecutive_404:
            print()
            break
        current_roll += 1
        time.sleep(0.4)

    if not students_data:
        print("No results found.")
        return

    last_roll_fetched = int(students_data[-1].get("ROLL_NO") or start_roll)
    safe_college_name = re.sub(r'\W+', '_', students_data[0].get("SCH_NAME", "Unknown").strip())
    safe_stream_name = re.sub(r'\W+', '_', students_data[0].get("STREAM", "N/A").strip())
    pdf_filename = f"{safe_college_name}_{safe_stream_name}_{start_roll}_to_{last_roll_fetched}.pdf"

    print("\nGenerating PDF...")
    generate_pdf_with_canvas(pdf_filename, students_data, college_name, stream, start_roll, last_roll_fetched)
    print(f"✅ PDF saved as: {pdf_filename}")
    print(f"\n✅ Total Valid Results Found: {len(students_data)}")
    print(f"📄 PDF contains {len(students_data)} mark sheets + cover")

if __name__ == "__main__":
    main()
