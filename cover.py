
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfgen import canvas
from reportlab.platypus import Table, TableStyle, Frame, PageTemplate, SimpleDocTemplate, Spacer, Image
from reportlab.lib.units import inch
import datetime
import os

# === Student Data ===
student = {
    "CNAME": "KRISHNA KUMAR",
    "ROLL_NO": "10001",
    "RROLL": "11062",
    "FNAME": "NIRANJAN KUMAR",
    "SCH_NAME": "ST XAVIER'S COLLEGE",
    "STREAM": "SCIENCE",
    "TOT_MRKS": "332",
    "RESULT": "1ST",
    "SUBJECTS": [
        ("ENA", "078", "-", "078"),
        ("PHY", "023", "029", "052"),
        ("CHE", "027", "017", "044"),
        ("BIO", "052", "027", "079"),
        ("CMS", "049", "030", "079"),
    ]
}

# === Cover Page ===
import requests
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import io
import datetime

import requests
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
import io
import datetime

def draw_cover_page(canvas, doc):
    canvas.saveState()
    width, height = A4

    # Logo circle settings
    circle_radius = 50
    center_x = width / 2
    center_y = height - 200  # Higher up so content fits

    # Draw circular frame
    canvas.setFillColor(colors.white)
    canvas.setStrokeColor(colors.black)
    canvas.setLineWidth(1)
    canvas.circle(center_x, center_y, circle_radius, stroke=1, fill=1)

    # Load and draw logo inside the circle
    try:
        logo_url = "https://results.digilocker.gov.in/assets-new/JAC_logo.png"
        response = requests.get(logo_url)
        logo_image = ImageReader(io.BytesIO(response.content))
        logo_size = circle_radius * 2 * 0.9  # Slightly smaller than circle
        canvas.drawImage(
            logo_image,
            center_x - logo_size / 2,
            center_y - logo_size / 2,
            width=logo_size,
            height=logo_size,
            mask='auto'
        )
    except:
        canvas.setFont("Helvetica", 10)
        canvas.drawCentredString(center_x, center_y, "[Logo Error]")

    # Starting point for text below logo
    text_y = center_y - circle_radius - 40

    # Title
    canvas.setFont("Helvetica-Bold", 22)
    canvas.drawCentredString(center_x, text_y, "JAC Intermediate")
    canvas.drawCentredString(center_x, text_y - 25, "Exam Results 2025")

    # Subheading
    canvas.setFont("Helvetica", 14)
    canvas.drawCentredString(center_x, text_y - 55, "Comprehensive Marksheet Report")

    # School name
    canvas.setFont("Helvetica-Bold", 16)
    canvas.drawCentredString(center_x, text_y - 95, "+2 HIGH SCHOOL TAMAR")

    # Stream and Roll Range
    canvas.setFont("Helvetica-Bold", 12)
    canvas.drawString(center_x - 70, text_y - 125, "Stream:")
    canvas.setFont("Helvetica", 12)
    canvas.drawString(center_x + 5, text_y - 125, "SCIENCE")

    canvas.setFont("Helvetica-Bold", 12)
    canvas.drawString(center_x - 70, text_y - 145, "Roll Range:")
    canvas.setFont("Helvetica", 12)
    canvas.drawString(center_x + 5, text_y - 145, "10001 to 10035")

    # Footer
    canvas.setFont("Helvetica", 12)
    canvas.drawCentredString(center_x, 120, "Generated by Sahil Das")

    canvas.setFont("Helvetica", 10)
    canvas.drawCentredString(center_x, 100, f"Date: {datetime.datetime.now().strftime('%B %d, %Y')}")

    canvas.restoreState()
# === Footer Header ===
def draw_header_footer(canvas, doc):
    canvas.setFont("Helvetica", 10)
    canvas.drawCentredString(A4[0]/2, A4[1]-30, "JAC Intermediate Results 2025")
    canvas.drawCentredString(A4[0]/2, 20, f"Page {doc.page - 1}")  # page 1 is cover

# === Marksheet Drawing ===
def draw_marksheet(canvas, student, x=60, y=130, width=475, height=620):
    canvas.saveState()
    canvas.setLineWidth(1)
    canvas.rect(x, y, width, height)

    inner_x = x + 15
    inner_y = y + height - 40

    canvas.setFont("Helvetica-Bold", 14)
    canvas.drawCentredString(x + width/2, inner_y, "JAC Intermediate (2025) Marksheet")

    info = [
        ("Roll No:", student["ROLL_NO"]),
        ("Roll Code:", student["RROLL"]),
        ("Name:", student["CNAME"]),
        ("Father's Name:", student["FNAME"]),
        ("School:", student["SCH_NAME"]),
        ("Stream:", student["STREAM"]),
    ]

    canvas.setFont("Helvetica", 10)
    inner_y -= 30
    for label, value in info:
        canvas.setFont("Helvetica-Bold", 10)
        canvas.drawString(inner_x, inner_y, label)
        canvas.setFont("Helvetica", 10)
        canvas.drawString(inner_x + 100, inner_y, value)
        inner_y -= 15

    canvas.line(inner_x, inner_y, x + width - 15, inner_y)
    inner_y -= 20

    canvas.setFont("Helvetica-Bold", 11)
    canvas.drawString(inner_x, inner_y, "Subjects & Marks")
    inner_y -= 20

    table_data = [["Subject", "Theory", "Practical", "Total"]]
    for row in student["SUBJECTS"]:
        table_data.append(list(row))

    table = Table(table_data, colWidths=[130, 90, 90, 90])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#f2f2f2")),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("FONTNAME", (3, 1), (3, -1), "Helvetica-Bold"),
        ("FONTNAME", (0, 1), (2, -1), "Helvetica"),
        ("FONTSIZE", (0, 0), (-1, -1), 10),
        ("ALIGN", (1, 1), (-1, -1), "CENTER"),
        ("BOTTOMPADDING", (0, 0), (-1, -1), 6),
    ]))

    table.wrapOn(canvas, width, height)
    table_height = len(table_data) * 20
    table.drawOn(canvas, inner_x, inner_y - table_height)

    final_y = inner_y - table_height - 60
    total = int(student["TOT_MRKS"])
    percent = round(total / 500 * 100, 1)

    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y, "Total Marks:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y, str(total))

    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y - 15, "Percentage:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y - 15, f"{percent}%")

    canvas.setFont("Helvetica-Bold", 10)
    canvas.drawString(inner_x, final_y - 30, "Result:")
    canvas.setFont("Helvetica", 10)
    canvas.drawString(inner_x + 100, final_y - 30, student["RESULT"])

    canvas.restoreState()

# === PDF Generator ===
def generate_pdf(filename="JAC_Report_With_Cover.pdf"):
    doc = SimpleDocTemplate(filename, pagesize=A4)

    def cover(canvas, doc):
        draw_cover_page(canvas, doc)

    def draw_page(canvas, doc):
        draw_header_footer(canvas, doc)
        draw_marksheet(canvas, student)

    frame = Frame(0, 0, A4[0], A4[1], id='normal')
    doc.addPageTemplates([
        PageTemplate(id='cover', frames=frame, onPage=cover),
        PageTemplate(id='marksheet', frames=frame, onPage=draw_page)
    ])

    doc.build([Spacer(1, 1), Spacer(1, 1)])  # triggers two pages
    print(f"âœ… Cover + Marksheet PDF Generated: {filename}")

generate_pdf()
