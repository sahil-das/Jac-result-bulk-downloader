import requests
from weasyprint import HTML
import datetime
import time
import re
import sys
import shutil
import itertools

spinner = itertools.cycle(["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"])


def cover_page_html(college_name, start_roll, end_roll, stream):
    logo_url = "https://results.digilocker.gov.in/assets-new/JAC_logo.png"

    return f"""
    <div style="page-break-after: always; 
                display: flex; 
                flex-direction: column; 
                justify-content: center; 
                align-items: center; 
                height: 100vh; 
                font-family: sans-serif;
                padding: 50px;">
        
        <img src="{logo_url}" alt="Logo" style="height:100px; margin-bottom: 30px;"/>

        <h1 style="font-size: 3em; margin-bottom: 0.2em;">JAC Intermediate Exam Results 2025</h1>
        <h2 style="font-weight: normal; margin-top: 0;">Comprehensive Marksheet Report</h2>
        <h3 style="margin-top: 0.5em;">{college_name}</h3>

        <p style="margin-top: 1em; font-size: 1.1em;">
            <strong>Stream:</strong> {stream}<br>
            <strong>Roll Range:</strong> {start_roll} to {end_roll}
        </p>

        <div style="margin-top: 3em; text-align: center;">
            <p style="font-size: 1.2em;">Generated by Sahil Das</p>
            <p style="font-size: 1em; margin-top: 1em;">Date: {datetime.datetime.now().strftime("%B %d, %Y")}</p>
        </div>
    </div>
    """


def format_html(student):
    total = int(student.get("TOT_MRKS") or 0)
    percent = round((total / 500) * 100, 2)

    subjects = []
    for i in range(1, 6):
        sub_nm = student.get(f"SUB{i}NM", "")
        th = student.get(f"SUB{i}_TH_MRKS", "")
        pr = student.get(f"SUB{i}_PR_MRKS", "")
        tot = student.get(f"SUB{i}_TOT_MRKS", "")
        if sub_nm:
            subjects.append({
                "name": sub_nm,
                "theory": th if th else "-",
                "practical": pr if pr else "-",
                "total": tot if tot else "-"
            })

    rows_html = ""
    for sub in subjects:
        rows_html += f"""
        <tr>
            <td style="border: 1px solid #ddd; padding: 8px;">{sub['name']}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align:right;">{sub['theory']}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align:right;">{sub['practical']}</td>
            <td style="border: 1px solid #ddd; padding: 8px; text-align:right; font-weight:bold;">{sub['total']}</td>
        </tr>
        """

    html = f"""
    <div style="page-break-after: always; font-family: sans-serif; border: 1px solid #333; padding: 20px; margin: 10px;">
        <h2 style="text-align:center;">JAC Intermediate (2025) Marksheet</h2>
        <p><strong>Roll No:</strong> {student.get("ROLL_NO", "")}</p>
        <p><strong>Roll Code:</strong> {student.get("RROLL", "")}</p>
        <p><strong>Name:</strong> {student.get("CNAME", "")}</p>
        <p><strong>Father's Name:</strong> {student.get("FNAME", "")}</p>
        <p><strong>School:</strong> {student.get("SCH_NAME", "")}</p>
        <p><strong>Stream:</strong> {student.get("STREAM", "")}</p>
        <hr>
        <h4>Subjects & Marks</h4>
        <table style="width:100%; border-collapse: collapse; text-align: center;">
            <thead style="background-color: #f2f2f2;">
                <tr>
                    <th style="border: 1px solid #ddd; padding: 8px;">Subject</th>
                    <th style="border: 1px solid #ddd; padding: 8px;">Theory</th>
                    <th style="border: 1px solid #ddd; padding: 8px;">Practical</th>
                    <th style="border: 1px solid #ddd; padding: 8px;">Total</th>
                </tr>
            </thead>
            <tbody>
                {rows_html}
            </tbody>
        </table>
        <p><strong>Total Marks:</strong> {total}</p>
        <p><strong>Percentage:</strong> {percent}%</p>
        <p><strong>Result:</strong> {student.get("RESULT", "")}</p>
    </div>
    """
    return html

def fetch_result(roll_code, roll_no):
    url = "https://results.digilocker.gov.in/JAC_Results/MetaData_HSCER"
    data = {
        "rroll": str(roll_no),
        "doctype": "HSCER",
        "rollcode": str(roll_code),
        "year": "2025"
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    try:
        response = requests.post(url, data=data, headers=headers)
        if response.status_code == 200:
            result_json = response.json()
            if result_json.get("status") == 200 and "data" in result_json:
                return result_json["data"]
    except Exception as e:
        print(f"Error fetching roll no {roll_no}: {e}")
    return None

def top_10_scorers_html(students):
    sorted_students = sorted(students, key=lambda x: int(x.get("TOT_MRKS") or 0), reverse=True)[:10]

    if sorted_students:
        stream = sorted_students[0].get("STREAM", "N/A")
        school = sorted_students[0].get("SCH_NAME", "N/A")
    else:
        stream = "N/A"
        school = "N/A"

    html = f"""
    <div style="page-break-after: always; font-family: sans-serif;">
        <h2 style="text-align:center;">Top 10 Scorers</h2>
        <p style="text-align:center; margin-top: -10px; font-size: 0.9em; font-weight: bold;">
            <b> ({stream} - {school} )</b>
        </p>
        <table style="width:100%; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="5">
            <thead style="background-color: #f2f2f2;">
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Roll No.</th>
                    <th>Total Marks</th>
                    <th>Percentage</th>
                </tr>
            </thead>
            <tbody>
    """

    for rank, student in enumerate(sorted_students, start=1):
        name = student.get("CNAME", "N/A")
        roll = student.get("ROLL_NO", "N/A")
        total = student.get("TOT_MRKS") or "0"
        percentage = round(int(total or 0) / 5.0, 2)

        html += f"""
            <tr>
                <td style="text-align:center;">{rank}</td>
                <td>{name}</td>
                <td style="text-align:center;">{roll}</td>
                <td style="text-align:center;">{total}</td>
                <td style="text-align:center;">{percentage}%</td>
            </tr>
        """

    html += "</tbody></table></div>"
    return html

def print_progress(current, total=None, roll_no=None, name=""):
    name_display = name[:30] if name else "Fetching..."
    if total:
        term_width = shutil.get_terminal_size((80, 20)).columns
        bar_length = min(40, max(term_width - 50, 10))
        progress = current / total
        block = int(bar_length * progress)
        bar = '█' * block + '░' * (bar_length - block)
        percent = f"{progress * 100:.2f}%"
        sys.stdout.write(
            f"\r[{bar}] {percent} | Roll: {roll_no} | {name_display:<30}"
        )
    else:
        spin = next(spinner)
        sys.stdout.write(
            f"\r{spin} Scanning Roll: {roll_no} | {name_display:<30} | Found: {current}"
        )
    sys.stdout.flush()


def summary_page_html(students):
    total_students = len(students)
    stream = students[0].get("STREAM", "N/A")
    school = students[0].get("SCH_NAME", "N/A")
    
    total_marks_list = [int(s.get("TOT_MRKS") or 0) for s in students]
    highest = max(total_marks_list) if total_marks_list else 0
    average = round(sum(total_marks_list) / total_students, 2) if total_students else 0

    # Division & result counters
    first_div = sum(1 for s in students if s.get("RESULT", "").lower().startswith("1st"))
    second_div = sum(1 for s in students if s.get("RESULT", "").lower().startswith("2nd"))
    third_div = sum(1 for s in students if s.get("RESULT", "").lower().startswith("3rd"))
    failed = sum(1 for s in students if "f" in s.get("RESULT", "").lower())
    passed = total_students - failed
    pass_percent = round((passed / total_students) * 100, 2) if total_students else 0

    html = f"""
    <div style="page-break-after: always; font-family: sans-serif; padding: 40px;">
        <h2 style="text-align: center;">Summary Report</h2>
        <p style="text-align:center; margin-top: -10px; font-size: 0.95em; font-weight: bold;">
            <b>{stream} - {school}</b>
        </p>
        <table style="width:65%; margin:auto; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="8">
            <tr><td><strong>Total Students</strong></td><td>{total_students}</td></tr>
            <tr><td><strong>Passed</strong></td><td>{passed}</td></tr>
            <tr><td><strong>Failed</strong></td><td>{failed}</td></tr>
            <tr><td><strong>First Division</strong></td><td>{first_div}</td></tr>
            <tr><td><strong>Second Division</strong></td><td>{second_div}</td></tr>
            <tr><td><strong>Pass Percentage</strong></td><td>{pass_percent}%</td></tr>
            <tr><td><strong>Highest Marks</strong></td><td>{highest}</td></tr>
            <tr><td><strong>Average Marks</strong></td><td>{average}</td></tr>
        </table>
    </div>
    """
    return html


def main():
    roll_code = input("Enter Roll Code (e.g. 11061): ").strip()
    #entered_college_name = input("Enter College Name: ").strip()
    start_roll = int(input("Enter starting Roll Number: ").strip())

    choice = input("Do you want to enter the last roll number? (y/n): ").strip().lower()

    if choice == 'y':
        last_roll = int(input("Enter last Roll Number: ").strip())
        if last_roll < start_roll:
            print("Last roll number must be greater than starting.")
            return
        download_all = False
        total_rolls = last_roll - start_roll + 1
    else:
        last_roll = None
        download_all = True

    students_data = []
    student_html_pages = []
    current_roll = start_roll
    consecutive_not_found = 0
    max_consecutive_404 = 10

    print("\nDownloading results...\n")

    count = 0

    while True:
        if not download_all and current_roll > last_roll:
            break

        student = fetch_result(roll_code, current_roll)

        if student:
            students_data.append(student)
            student_html_pages.append(format_html(student))
            consecutive_not_found = 0

             # Set and print college name on first valid student
            if len(students_data) == 1:
                college_name = student.get("SCH_NAME", "Unknown College")
                stream = student.get("STREAM", "N/A")
                print(f"📘 {college_name} — Stream: {stream}\n")

        else:
            consecutive_not_found += 1

        count += 1

        name = student.get("CNAME", "") if student else ""

        if not download_all:
            print_progress(count, total_rolls, current_roll, name)
        else:
            print_progress(count, None, current_roll, name)

        if download_all and consecutive_not_found >= max_consecutive_404:
            print()
            break

        current_roll += 1
        time.sleep(0.2)

    if not students_data:
        print("No results found.")
        return

    global_styles = """
    <style>
        @page {
            size: A4;
            margin: 2cm;
            @top-center {
            content: "JAC Intermediate Results 2025";
            font-size: 12px;
            color: #555;
            }
            @bottom-center {
            content: "Page " counter(page) "\AGenerated by Sahil Das";
            font-size: 12px;
            color: #888;
            white-space: pre;
            }
        }
        body {
            font-family: Arial, sans-serif;
        }
    </style>

    """

    last_roll_fetched = int(students_data[-1].get("ROLL_NO") or start_roll)
    college_name= students_data[0].get("SCH_NAME", "Unknown College")
    stream = students_data[0].get("STREAM", "N/A")
    cover_html = cover_page_html(college_name, start_roll, last_roll_fetched, stream)

    top10_html = top_10_scorers_html(students_data)
    summary_html = summary_page_html(students_data)

    all_html = global_styles + cover_html + "\n" + summary_html + "\n" + top10_html + "\n" + "\n".join(student_html_pages)

   # all_html = global_styles + cover_html + "\n" + top10_html + "\n" + "\n".join(student_html_pages)

    safe_college_name = re.sub(r'\W+', '_', college_name.strip())
    safe_stream_name = re.sub(r'\W+', '_', stream.strip())
    last_roll_fetched_str = str(last_roll_fetched)

    pdf_filename = f"{safe_college_name}_{safe_stream_name}_{start_roll}_to_{last_roll_fetched_str}.pdf"

    print("\nGenerating PDF...")
    HTML(string=all_html).write_pdf(pdf_filename)
    print(f"✅ PDF saved as: {pdf_filename}")
    print(f"\n✅ Total Valid Results Found: {len(students_data)}")
    print(f"📄 PDF contains {len(students_data)} mark sheets + cover + top 10")


if __name__ == "__main__":
    main()
