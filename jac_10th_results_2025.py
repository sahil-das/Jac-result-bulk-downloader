import requests
from bs4 import BeautifulSoup
from weasyprint import HTML
import datetime
import time
import itertools

spinner = itertools.cycle(["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"])

def cover_page_html(school_name, start_roll, end_roll):
    logo_url = "https://results.digilocker.gov.in/assets-new/JAC_logo.png"
    return f"""
    <div style="page-break-after: always; 
                display: flex; 
                flex-direction: column; 
                justify-content: center; 
                align-items: center; 
                height: 100vh; 
                font-family: sans-serif;
                padding: 50px;">
        
        <img src="{logo_url}" alt="Logo" style="height:100px; margin-bottom: 30px;"/>
        <h1 style="font-size: 3em; margin-bottom: 0.2em;">JAC Class 10th Results 2025</h1>
        <h2 style="font-weight: normal; margin-top: 0;">Comprehensive Marksheet Report</h2>
        <h3 style="margin-top: 0.5em;">{school_name}</h3>
        <p style="margin-top: 1em; font-size: 1.1em;">
            <strong>Roll Range:</strong> {start_roll} to {end_roll}
        </p>
        <div style="margin-top: 3em; text-align: center;">
            <p style="font-size: 1.2em;">Generated by Sahil Das</p>
            <p style="font-size: 1em; margin-top: 1em;">Date: {datetime.datetime.now().strftime("%B %d, %Y")}</p>
        </div>
    </div>
    """

def top_10_scorers_html(students):
    sorted_students = sorted(students, key=lambda x: float(x.get("percent", 0)), reverse=True)[:10]
    html = """
    <div style="page-break-after: always; font-family: sans-serif;">
    <h2 style="text-align:center;">Top 10 Scorers</h2>
    <table style="width:100%; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="5">
        <thead style="background-color: #f2f2f2;">
            <tr>
                <th>Rank</th>
                <th>Name</th>
                <th>Roll No.</th>
                <th>Total Marks</th>
                <th>Percentage</th>
                <th>School</th>
            </tr>
        </thead>
        <tbody>
    """
    for i, s in enumerate(sorted_students, start=1):
        html += f"""
        <tr>
            <td style="text-align:center;">{i}</td>
            <td>{s['name']}</td>
            <td style="text-align:center;">{s['roll_no']}</td>
            <td style="text-align:center;">{s['total']}</td>
            <td style="text-align:center;">{s['percent']}%</td>
            <td>{s['school']}</td>
        </tr>
        """
    html += "</tbody></table></div>"
    return html

def student_html(student):
    subjects_html = ""
    for sub in student["subjects"]:
        subjects_html += f"""
        <tr>
            <td>{sub['name']}</td>
            <td style="text-align:center;">{sub['marks']}</td>
        </tr>
        """
    return f"""
    <div style="page-break-after: always; font-family: sans-serif; padding: 20px; border: 1px solid #aaa; margin: 10px;">
        <h2 style="text-align:center;">Class 10 Marksheet</h2>
        <p><strong>Name:</strong> {student['name']}</p>
        <p><strong>Roll No:</strong> {student['roll_no']}</p>
        <p><strong>School:</strong> {student['school']}</p>
        <hr>
        <h4>Subjects & Marks</h4>
        <table style="width:100%; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="5">
            <tr><th>Subject</th><th>Marks</th></tr>
            {subjects_html}
        </table>
        <p><strong>Total Marks:</strong> {student['total']}</p>
        <p><strong>Percentage:</strong> {student['percent']}%</p>
    </div>
    """

def main():
    roll_code = input("Enter Roll Code (e.g. 11061): ").strip()
    school_name = input("Enter School Name: ").strip()
    start_roll = int(input("Enter starting Roll Number: ").strip())
    end_roll = int(input("Enter last Roll Number: ").strip())

    url = "https://jacresults.com/enter-class-x-2025-student-details"
    students = []
    session = requests.Session()

    print("Fetching results...")
    for roll in range(start_roll, end_roll + 1):
        # Fetch the form page fresh for each roll number
        r = session.get(url)
        soup = BeautifulSoup(r.text, "html.parser")
        
        viewstate = soup.find("input", {"id": "__VIEWSTATE"})["value"]
        viewstategen = soup.find("input", {"id": "__VIEWSTATEGENERATOR"})["value"]
        eventvalidation = soup.find("input", {"id": "__EVENTVALIDATION"})["value"]
        captcha_text = soup.find("span", {"id": "captcha_display"}).text.strip()

        print(f"Captcha for roll {roll}: {captcha_text}")
        user_captcha = input("Enter captcha displayed on website: ").strip()

        form_data = {
            "__VIEWSTATE": viewstate,
            "__VIEWSTATEGENERATOR": viewstategen,
            "__EVENTVALIDATION": eventvalidation,
            "ctl00$ContentPlaceHolder1$txt_code": roll_code,
            "ctl00$ContentPlaceHolder1$txt_no": str(roll),
            "ctl00$ContentPlaceHolder1$txt_captcha": user_captcha,
            "ctl00$ContentPlaceHolder1$btn_submit": "Submit"
        }

        post = session.post(url, data=form_data)
        
    # ... parse post.text for student data ...

        post = session.post(url, data=form_data)
        if "Student Name" in post.text:
            soup_post = BeautifulSoup(post.text, "html.parser")
            try:
                name = soup_post.find("span", id="ctl00_ContentPlaceHolder1_lblName").text.strip()
                school = soup_post.find("span", id="ctl00_ContentPlaceHolder1_lblSchool").text.strip()
                total = int(soup_post.find("span", id="ctl00_ContentPlaceHolder1_lblTotalMarks").text.strip())
                percent = round((total / 500) * 100, 2)

                subjects = []
                for i in range(1, 6):
                    try:
                        subject = soup_post.find("span", id=f"ctl00_ContentPlaceHolder1_lblSub{i}").text.strip()
                        marks = soup_post.find("span", id=f"ctl00_ContentPlaceHolder1_lblMarks{i}").text.strip()
                        subjects.append({"name": subject, "marks": marks})
                    except:
                        pass

                students.append({
                    "roll_no": roll,
                    "name": name,
                    "school": school,
                    "total": total,
                    "percent": percent,
                    "subjects": subjects
                })

                print(f"Fetched roll {roll} - {name} {next(spinner)}", end="\r")
            except Exception as e:
                print(f"Failed to parse student data for roll {roll}: {e}")

        else:
            print(f"No data for roll {roll} {next(spinner)}", end="\r")

        time.sleep(0.5)  # be polite with server

    if not students:
        print("\nNo student data fetched. Exiting.")
        return

    cover = cover_page_html(school_name, start_roll, end_roll)
    top10 = top_10_scorers_html(students)
    details = "".join([student_html(s) for s in students])

    print("\nGenerating PDF...")
    HTML(string=cover + top10 + details).write_pdf("JAC_Class10_Results_2025.pdf")
    print("✅ PDF saved as JAC_Class10_Results_2025.pdf")

if __name__ == "__main__":
    main()
